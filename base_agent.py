"""
base_agent.py

This module defines the base Agent class and related components for the AI News Podcast Generation System.
It provides the foundational structure for all agent types in the system.
"""

import requests
from typing import List, Tuple
from dotenv import load_dotenv
import os
from tavily import TavilyClient
import logging

load_dotenv()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AgentError(Exception):
    """Custom exception class for Agent-related errors."""
    pass

class Thought:
    """
    Represents a single thought in the Tree of Thought process.

    Attributes:
        content (str): The content of the thought.
        evaluation (str): The evaluation of the thought ('sure', 'maybe', or 'impossible').
    """
    def __init__(self, content: str, evaluation: str = None):
        self.content = content
        self.evaluation = evaluation

class Agent:
    """
    Base class for all agents in the system.

    This class provides common functionality for internet search and Tree of Thought processing.

    Attributes:
        name (str): The name of the agent.
        model (str): The name of the language model used by the agent.
        max_depth (int): The maximum depth for the Tree of Thought process.
        branching_factor (int): The branching factor for the Tree of Thought process.
        tavily_client (TavilyClient): Client for making internet searches.
    """

    def __init__(self, name: str, model: str, tavily_api_key: str, max_depth: int = 2, branching_factor: int = 2):
        """
        Initialize the Agent.

        Args:
            name (str): The name of the agent.
            model (str): The name of the language model to be used.
            tavily_api_key (str): API key for Tavily search.
            max_depth (int, optional): Maximum depth for Tree of Thought. Defaults to 2.
            branching_factor (int, optional): Branching factor for Tree of Thought. Defaults to 2.

        Raises:
            AgentError: If initialization of Tavily client fails.
        """
        self.name = name
        self.model = model
        self.max_depth = max_depth
        self.branching_factor = branching_factor
        try:
            self.tavily_client = TavilyClient(api_key=tavily_api_key)
        except Exception as e:
            logger.error(f"Failed to initialize Tavily client: {str(e)}")
            raise AgentError(f"Failed to initialize Tavily client: {str(e)}")

    def search_internet(self, query: str) -> str:
        """
        Perform an internet search using the Tavily API.

        Args:
            query (str): The search query.

        Returns:
            str: The search results as a string.

        Raises:
            AgentError: If the search fails.
        """
        try:
            search_result = self.tavily_client.get_search_context(
                query=query,
                search_depth="advanced",
                max_results=3,
            )
            return str(search_result)
        except Exception as e:
            logger.error(f"Error searching the internet: {str(e)}")
            raise AgentError(f"Error searching the internet: {str(e)}")

    def generate_thoughts(self, prompt: str, depth: int) -> List[Thought]:
        """
        Generate thoughts based on a prompt.

        This method should be implemented by subclasses to use the specific model.

        Args:
            prompt (str): The prompt to generate thoughts from.
            depth (int): The current depth in the Tree of Thought process.

        Returns:
            List[Thought]: A list of generated thoughts.

        Raises:
            NotImplementedError: If not implemented by a subclass.
        """
        raise NotImplementedError("This method should be implemented by subclasses")

    def evaluate_thoughts(self, thoughts: List[Thought]) -> List[Thought]:
        """
        Evaluate a list of thoughts.

        This method should be implemented by subclasses to use the specific model.

        Args:
            thoughts (List[Thought]): The list of thoughts to evaluate.

        Returns:
            List[Thought]: The list of thoughts with evaluations.

        Raises:
            NotImplementedError: If not implemented by a subclass.
        """
        raise NotImplementedError("This method should be implemented by subclasses")

    def tree_of_thought(self, initial_prompt: str) -> List[Thought]:
        """
        Perform the Tree of Thought process.

        This method implements the core Tree of Thought algorithm.

        Args:
            initial_prompt (str): The initial prompt to start the process.

        Returns:
            List[Thought]: The final list of thoughts generated by the process.

        Raises:
            AgentError: If an error occurs during the process.
        """
        try:
            frontier = [(Thought(initial_prompt), 0)]
            solution = []

            while frontier and len(solution) < self.branching_factor:
                current_thought, depth = frontier.pop(0)
                
                if depth == self.max_depth or current_thought.evaluation == 'sure':
                    solution.append(current_thought)
                    continue

                if depth < self.max_depth:
                    children = self.generate_thoughts(current_thought.content, depth + 1)
                    evaluated_children = self.evaluate_thoughts(children)
                    frontier.extend((child, depth + 1) for child in evaluated_children if child.evaluation != "impossible")

            return solution
        except Exception as e:
            logger.error(f"Error in tree of thought process: {str(e)}")
            raise AgentError(f"Error in tree of thought process: {str(e)}")

    def process(self, input: str) -> str:
        """
        Process an input string.

        This method should be implemented by subclasses to define the specific processing logic.

        Args:
            input (str): The input string to process.

        Returns:
            str: The processed output.

        Raises:
            NotImplementedError: If not implemented by a subclass.
        """
        raise NotImplementedError("This method should be implemented by subclasses")

